generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FlywayHistory {
  installed_rank Int      @id(map: "FlywayHistory_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "FlywayHistory_s_idx")
}

model image {
  image_id   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  image_url  String  @db.VarChar(255)
  product_id String  @db.Uuid
  product    product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
}

model orderitem {
  order_item_id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id      String  @db.Uuid
  product_id    String  @db.Uuid
  user_id       String  @db.Uuid
  quantity      Int?    @default(1)
  orders        orders  @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  product       product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
  users         users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  order_id   String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String      @db.Uuid
  status     status?     @default(PENDING)
  created_at DateTime?   @default(now()) @db.Timestamp(6)
  orderitem  orderitem[]
  users      users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model product {
  product_id     String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  vendor_id      String       @db.Uuid
  name           String       @db.VarChar(100)
  decsription    String?
  price          Decimal      @db.Decimal(10, 2)
  image_url      String?      @db.VarChar(255)
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  condition      condition?
  is_available   Boolean?     @default(true)
  subcategory_id String?      @db.Uuid
  image          image[]
  orderitem      orderitem[]
  subcategory    subcategory? @relation(fields: [subcategory_id], references: [subcategory_id], onDelete: Cascade, onUpdate: NoAction, map: "subcategory_fk")
  vendor         vendor       @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id     String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name  String      @db.VarChar(60)
  last_name   String      @db.VarChar(60)
  email       String      @unique @db.VarChar(120)
  password    String      @db.VarChar(64)
  created_at  DateTime?   @default(now()) @db.Timestamp(6)
  role        role?       @default(CUSTOMER)
  phone       String?     @db.VarChar(20)
  is_verified Boolean?    @default(false)
  orderitem   orderitem[]
  orders      orders[]
  vendor      vendor[]
}

model vendor {
  vendor_id  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  store_name String    @db.VarChar(100)
  bio        String?
  image_url  String?   @db.VarChar(255)
  product    product[]
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model category {
  category_id         String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category_name       String                @unique @db.VarChar(255)
  department_id       String?               @db.Uuid
  department          department?           @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
  categorysubcategory categorysubcategory[]
  departmentcategory  departmentcategory[]
  subcategory         subcategory[]
}

model categorysubcategory {
  category_id    String      @db.Uuid
  subcategory_id String      @db.Uuid
  category       category    @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)
  subcategory    subcategory @relation(fields: [subcategory_id], references: [subcategory_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([category_id, subcategory_id])
}

model department {
  department_id      String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  department_name    String               @unique @db.VarChar(255)
  category           category[]
  departmentcategory departmentcategory[]
}

model departmentcategory {
  department_id String     @db.Uuid
  category_id   String     @db.Uuid
  category      category   @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)
  department    department @relation(fields: [department_id], references: [department_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([department_id, category_id])
}

model subcategory {
  subcategory_id      String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subcategory_name    String                @db.VarChar(255)
  category_id         String?               @db.Uuid
  categorysubcategory categorysubcategory[]
  product             product[]
  category            category?             @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)
}

enum role {
  CUSTOMER
  VENDOR
  ADMIN
}

enum status {
  PENDING
  DELIVERED
  CANCELLED
}

enum condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  BAD
}
